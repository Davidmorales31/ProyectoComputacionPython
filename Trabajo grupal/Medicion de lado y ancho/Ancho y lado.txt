# Importar las librerías necesarias
from scipy.spatial import distance as dist
from imutils import perspective
from imutils import contours
import numpy as np
import imutils
import cv2
import requests

# Función para calcular el punto medio entre dos puntos
def midpoint(ptA, ptB):
    return ((ptA[0] + ptB[0]) * 0.5, (ptA[1] + ptB[1]) * 0.5)

# Dimensión conocida del objeto de referencia (en cm)
KNOWN_WIDTH = 7.5  # Lado del cuadrado de referencia

# Inicializar la cámara
camera = cv2.VideoCapture(2)  # 0 para la cámara por defecto
pixelsPerMetric = None

# Bucle principal
while True:
    # Capturar un frame de la cámara
    ret, frame = camera.read()
    if not ret:
        break
    
    # Crear una copia del frame original para asegurar que siempre exista
    orig = frame.copy()
    
    # Convertir el frame a escala de grises y aplicar desenfoque
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    gray = cv2.GaussianBlur(gray, (7, 7), 0)
    
    # Detectar bordes y aplicar operaciones morfológicas
    edged = cv2.Canny(gray, 50, 100)
    edged = cv2.dilate(edged, None, iterations=1)
    edged = cv2.erode(edged, None, iterations=1)
    
    # Encontrar contornos en el mapa de bordes
    cnts = cv2.findContours(edged.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    cnts = imutils.grab_contours(cnts)
    
    # Ordenar contornos de izquierda a derecha
    if len(cnts) > 0:
        (cnts, _) = contours.sort_contours(cnts)
    
    # Iterar sobre los contornos
    for c in cnts:
        # Ignorar contornos pequeños
        if cv2.contourArea(c) < 500:
            continue
        
        # Calcular el cuadro delimitador rotado
        box = cv2.minAreaRect(c)
        box = cv2.boxPoints(box) if imutils.is_cv3() else cv2.boxPoints(box)
        box = np.array(box, dtype="int")
        box = perspective.order_points(box)
        
        # Dibujar el contorno y puntos en el cuadro delimitador
        cv2.drawContours(orig, [box.astype("int")], -1, (0, 255, 0), 2)
        for (x, y) in box:
            cv2.circle(orig, (int(x), int(y)), 5, (0, 0, 255), -1)
        
        # Calcular los puntos medios
        (tl, tr, br, bl) = box
        (tltrX, tltrY) = midpoint(tl, tr)
        (blbrX, blbrY) = midpoint(bl, br)
        (tlblX, tlblY) = midpoint(tl, bl)
        (trbrX, trbrY) = midpoint(tr, br)
        
        # Dibujar puntos medios y líneas entre ellos
        cv2.circle(orig, (int(tltrX), int(tltrY)), 5, (255, 0, 0), -1)
        cv2.circle(orig, (int(blbrX), int(blbrY)), 5, (255, 0, 0), -1)
        cv2.circle(orig, (int(tlblX), int(tlblY)), 5, (255, 0, 0), -1)
        cv2.circle(orig, (int(trbrX), int(trbrY)), 5, (255, 0, 0), -1)
        cv2.line(orig, (int(tltrX), int(tltrY)), (int(blbrX), int(blbrY)), (255, 0, 255), 2)
        cv2.line(orig, (int(tlblX), int(tlblY)), (int(trbrX), int(trbrY)), (255, 0, 255), 2)
        
        # Calcular distancias euclidianas
        dA = dist.euclidean((tltrX, tltrY), (blbrX, blbrY))
        dB = dist.euclidean((tlblX, tlblY), (trbrX, trbrY))
        
        # Calibrar pixels per metric solo con el cuadrado de referencia
        if pixelsPerMetric is None:
            # Usar el lado mayor como referencia
            refDim = max(dA, dB)
            pixelsPerMetric = refDim / KNOWN_WIDTH
            continue  # No medir otros objetos hasta calibrar
        
        # Calcular dimensiones del objeto en cm
        dimA = dA / pixelsPerMetric
        dimB = dB / pixelsPerMetric
        
        # Mostrar las dimensiones en la imagen
        cv2.putText(orig, "{:.1f}cm".format(dimA),
                    (int(tltrX - 15), int(tltrY - 10)), cv2.FONT_HERSHEY_SIMPLEX,
                    0.65, (255, 255, 255), 2)
        cv2.putText(orig, "{:.1f}cm".format(dimB),
                    (int(trbrX + 10), int(trbrY)), cv2.FONT_HERSHEY_SIMPLEX,
                    0.65, (255, 255, 255), 2)
        
        # Detectar si se presiona la tecla 'g' para enviar los datos a la API
        if key == ord('g'):
            # Crear el payload para la solicitud
            payload = {
                "fruta_objeto": "Medicion A&L", #TOCA CAMBIAR ESTO
                "tipo_medicion_id": 5,
                "resultado": f"{dimB:.1f}cm x {dimA:.1f}cm",
                "estudiante_id": 4
            }
            try:
                # Realizar la solicitud POST a la API
                response = requests.post(
                    "https://cdb1-2801-159-0-9227-d0be-215b-d408-908a.ngrok-free.app/insertar",
                    json=payload
                )
                print(f"API Response: {response.status_code}, {response.text}")
            except Exception as e:
                print(f"Error al enviar datos a la API: {e}")
    
    # Mostrar la imagen procesada
    cv2.imshow("Frame", orig)
    
    # Capturar la tecla presionada
    key = cv2.waitKey(1) & 0xFF
    
    # Salir del bucle si se presiona la tecla 'q'
    if key == ord('q'):
        break

# Liberar la cámara y cerrar las ventanas
camera.release()
cv2.destroyAllWindows()

# Instrucciones para instalar las dependencias necesarias
# 1. Instalar OpenCV
# pip install opencv-python-headless

# 2. Instalar imutils
# pip install imutils

# 3. Instalar scipy
# pip install scipy

# Fuente del código original y adaptaciones: https://pyimagesearch.com/2016/03/28/measuring-size-of-objects-in-an-image-with-opencv/